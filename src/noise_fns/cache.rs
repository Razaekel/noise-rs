use crate::noise_fns::NoiseFn;
use std::sync::{Arc, RwLock};

/// Noise function that caches the last output value generated by the source
/// function.
///
/// If the input coordinates passed to `Cache::get` are equal to the previous
/// call, the function returns the cached result of the previous call to
/// `Source::get`. Otherwise, `Source::get` is called with the new coordinates,
/// overwriting the cache with the result, and returning the result to the
/// caller.
///
/// Caching a noise function is useful if it is used as a source function for
/// multiple noise functions. If a source function is not cached, the source
/// function will redundantly calculate the same output value once for each
/// noise function in which it is included.
#[derive(Clone, Debug)]
pub struct Cache<Source> {
    /// Outputs the value to be cached.
    pub source: Source,

    value: Arc<RwLock<Option<f64>>>,

    point: Arc<RwLock<Vec<f64>>>,
}

impl<Source> Cache<Source> {
    pub fn new(source: Source) -> Self {
        Cache {
            source,
            value: Arc::new(RwLock::new(None)),
            point: Arc::new(RwLock::new(Vec::new())),
        }
    }
}

impl<Source, const DIM: usize> NoiseFn<f64, DIM> for Cache<Source>
where
    Source: NoiseFn<f64, DIM>,
{
    fn get(&self, point: [f64; DIM]) -> f64 {
        let readable = self.value.read().unwrap();
        if let Some(value) = *readable {
            if quick_eq(&*self.point.read().unwrap(), &point) {
                return value;
            }
        }
        drop(readable);

        let value = self.source.get(point);
        let mut writable = self.value.write().unwrap();
        *writable = Some(value);

        let mut cached_point = self.point.write().unwrap();
        cached_point.clear();
        cached_point.extend_from_slice(&point);

        value
    }
}

fn quick_eq(a: &[f64], b: &[f64]) -> bool {
    assert_eq!(a.len(), b.len());

    a.iter().eq(b)
}
