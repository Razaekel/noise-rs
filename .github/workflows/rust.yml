name: CI

on: [push, pull_request]

env:
  minrust: 1.36.0

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}

    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly

        include:
          - name: beta
            toolchain: beta
          - name: nightly
            toolchain: nightly

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-test-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build all features
        if: matrix.features == ''
        run: cargo build --all-features

      - name: Test all features
        if: matrix.features == ''
        run: cargo test --all-features

      - name: Build some features
        if: matrix.features
        run: cargo build --no-default-features --features "${{ matrix.features }}"

      - name: Test some features
        if: matrix.features
        run: cargo test --no-default-features --features "${{ matrix.features }}"

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - run: rustup component add rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - run: rustup component add clippy

      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  MSRV:
    name: Validate MSRV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain (${{ env.minrust }})
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.minrust }}
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-msrv-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - run: rustup component add rustfmt

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - run: rustup component add clippy

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  doc:
    name: Build docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-docs-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Build docs
        env:
          RUSTDOCFLAGS: -D broken_intra_doc_links
        run: |
          cargo doc --no-deps

  examples:
    name: Examples
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: tc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            examples/target
          key: ${{ runner.os }}-examples-${{ steps.tc.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.toml') }}

      - name: 'Build example Abs'
        working-directory: examples
        run: cargo build --example abs
      - name: 'Build example Add'
        working-directory: examples
        run: cargo build --example add
      - name: 'Build example BasicMulti'
        working-directory: examples
        run: cargo build --example basicmulti
      - name: 'Build example Billow'
        working-directory: examples
        run: cargo build --example billow
      - name: 'Build example Blend'
        working-directory: examples
        run: cargo build --example blend
      - name: 'Build example Cache'
        working-directory: examples
        run: cargo build --example cache
      - name: 'Build example Checkerboard'
        working-directory: examples
        run: cargo build --example checkerboard
      - name: 'Build example Clamp'
        working-directory: examples
        run: cargo build --example clamp
      - name: 'Build example ComplexPlanet'
        working-directory: examples
        run: cargo build --example complexplanet
      - name: 'Build example Constant'
        working-directory: examples
        run: cargo build --example constant
      - name: 'Build example Curve'
        working-directory: examples
        run: cargo build --example curve
      - name: 'Build example Cylinders'
        working-directory: examples
        run: cargo build --example curve
      - name: 'Build example Displace'
        working-directory: examples
        run: cargo build --example displace
      - name: 'Build example Exponent'
        working-directory: examples
        run: cargo build --example exponent
      - name: 'Build example Fbm'
        working-directory: examples
        run: cargo build --example fbm
      - name: 'Build example HybridMulti'
        working-directory: examples
        run: cargo build --example hybridmulti
      - name: 'Build example Max'
        working-directory: examples
        run: cargo build --example max
      - name: 'Build example Min'
        working-directory: examples
        run: cargo build --example min
      - name: 'Build example Multiply'
        working-directory: examples
        run: cargo build --example multiply
      - name: 'Build example Negate'
        working-directory: examples
        run: cargo build --example negate
      - name: 'Build example OpenSimplex'
        working-directory: examples
        run: cargo build --example open_simplex
      - name: 'Build example Perlin'
        working-directory: examples
        run: cargo build --example perlin
      - name: 'Build example Power'
        working-directory: examples
        run: cargo build --example power
      - name: 'Build example RidgedMulti'
        working-directory: examples
        run: cargo build --example ridgedmulti
      - name: 'Build example Rotate'
        working-directory: examples
        run: cargo build --example rotate_point
      - name: 'Build example ScaleBias'
        working-directory: examples
        run: cargo build --example scale_bias
      - name: 'Build example Scale'
        working-directory: examples
        run: cargo build --example scale_point
      - name: 'Build example Select'
        working-directory: examples
        run: cargo build --example select
      - name: 'Build example SuperSimplex'
        working-directory: examples
        run: cargo build --example super_simplex
      - name: 'Build example Terrace'
        working-directory: examples
        run: cargo build --example terrace
      - name: 'Build example TextureGranite'
        working-directory: examples
        run: cargo build --example texturegranite
      - name: 'Build example TextureJade'
        working-directory: examples
        run: cargo build --example texturejade
      - name: 'Build example TextureSlime'
        working-directory: examples
        run: cargo build --example textureslime
      - name: 'Build example TextureWood'
        working-directory: examples
        run: cargo build --example texturewood
      - name: 'Build example Translate'
        working-directory: examples
        run: cargo build --example translate_point
      - name: 'Build example turbulence'
        working-directory: examples
        run: cargo build --example turbulence
      - name: 'Build example Value'
        working-directory: examples
        run: cargo build --example value
      - name: 'Build example Worley'
        working-directory: examples
        run: cargo build --example worley
